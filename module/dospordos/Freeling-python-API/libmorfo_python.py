# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libmorfo_python', [dirname(__file__)])
        except ImportError:
            import _libmorfo_python
            return _libmorfo_python
        if fp is not None:
            try:
                _mod = imp.load_module('_libmorfo_python', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libmorfo_python = swig_import_helper()
    del swig_import_helper
else:
    import _libmorfo_python
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libmorfo_python.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _libmorfo_python.SwigPyIterator_value(self)
    def incr(self, n = 1): return _libmorfo_python.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _libmorfo_python.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _libmorfo_python.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _libmorfo_python.SwigPyIterator_equal(self, *args)
    def copy(self): return _libmorfo_python.SwigPyIterator_copy(self)
    def next(self): return _libmorfo_python.SwigPyIterator_next(self)
    def __next__(self): return _libmorfo_python.SwigPyIterator___next__(self)
    def previous(self): return _libmorfo_python.SwigPyIterator_previous(self)
    def advance(self, *args): return _libmorfo_python.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _libmorfo_python.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _libmorfo_python.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _libmorfo_python.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _libmorfo_python.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _libmorfo_python.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _libmorfo_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _libmorfo_python.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorWord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorWord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorWord, name)
    __repr__ = _swig_repr
    def iterator(self): return _libmorfo_python.VectorWord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libmorfo_python.VectorWord___nonzero__(self)
    def __bool__(self): return _libmorfo_python.VectorWord___bool__(self)
    def __len__(self): return _libmorfo_python.VectorWord___len__(self)
    def pop(self): return _libmorfo_python.VectorWord_pop(self)
    def __getslice__(self, *args): return _libmorfo_python.VectorWord___getslice__(self, *args)
    def __setslice__(self, *args): return _libmorfo_python.VectorWord___setslice__(self, *args)
    def __delslice__(self, *args): return _libmorfo_python.VectorWord___delslice__(self, *args)
    def __delitem__(self, *args): return _libmorfo_python.VectorWord___delitem__(self, *args)
    def __getitem__(self, *args): return _libmorfo_python.VectorWord___getitem__(self, *args)
    def __setitem__(self, *args): return _libmorfo_python.VectorWord___setitem__(self, *args)
    def append(self, *args): return _libmorfo_python.VectorWord_append(self, *args)
    def empty(self): return _libmorfo_python.VectorWord_empty(self)
    def size(self): return _libmorfo_python.VectorWord_size(self)
    def clear(self): return _libmorfo_python.VectorWord_clear(self)
    def swap(self, *args): return _libmorfo_python.VectorWord_swap(self, *args)
    def get_allocator(self): return _libmorfo_python.VectorWord_get_allocator(self)
    def begin(self): return _libmorfo_python.VectorWord_begin(self)
    def end(self): return _libmorfo_python.VectorWord_end(self)
    def rbegin(self): return _libmorfo_python.VectorWord_rbegin(self)
    def rend(self): return _libmorfo_python.VectorWord_rend(self)
    def pop_back(self): return _libmorfo_python.VectorWord_pop_back(self)
    def erase(self, *args): return _libmorfo_python.VectorWord_erase(self, *args)
    def __init__(self, *args): 
        this = _libmorfo_python.new_VectorWord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libmorfo_python.VectorWord_push_back(self, *args)
    def front(self): return _libmorfo_python.VectorWord_front(self)
    def back(self): return _libmorfo_python.VectorWord_back(self)
    def assign(self, *args): return _libmorfo_python.VectorWord_assign(self, *args)
    def resize(self, *args): return _libmorfo_python.VectorWord_resize(self, *args)
    def insert(self, *args): return _libmorfo_python.VectorWord_insert(self, *args)
    def reserve(self, *args): return _libmorfo_python.VectorWord_reserve(self, *args)
    def capacity(self): return _libmorfo_python.VectorWord_capacity(self)
    __swig_destroy__ = _libmorfo_python.delete_VectorWord
    __del__ = lambda self : None;
VectorWord_swigregister = _libmorfo_python.VectorWord_swigregister
VectorWord_swigregister(VectorWord)

class ListWord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListWord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListWord, name)
    __repr__ = _swig_repr
    def iterator(self): return _libmorfo_python.ListWord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libmorfo_python.ListWord___nonzero__(self)
    def __bool__(self): return _libmorfo_python.ListWord___bool__(self)
    def __len__(self): return _libmorfo_python.ListWord___len__(self)
    def pop(self): return _libmorfo_python.ListWord_pop(self)
    def __getslice__(self, *args): return _libmorfo_python.ListWord___getslice__(self, *args)
    def __setslice__(self, *args): return _libmorfo_python.ListWord___setslice__(self, *args)
    def __delslice__(self, *args): return _libmorfo_python.ListWord___delslice__(self, *args)
    def __delitem__(self, *args): return _libmorfo_python.ListWord___delitem__(self, *args)
    def __getitem__(self, *args): return _libmorfo_python.ListWord___getitem__(self, *args)
    def __setitem__(self, *args): return _libmorfo_python.ListWord___setitem__(self, *args)
    def append(self, *args): return _libmorfo_python.ListWord_append(self, *args)
    def empty(self): return _libmorfo_python.ListWord_empty(self)
    def size(self): return _libmorfo_python.ListWord_size(self)
    def clear(self): return _libmorfo_python.ListWord_clear(self)
    def swap(self, *args): return _libmorfo_python.ListWord_swap(self, *args)
    def get_allocator(self): return _libmorfo_python.ListWord_get_allocator(self)
    def begin(self): return _libmorfo_python.ListWord_begin(self)
    def end(self): return _libmorfo_python.ListWord_end(self)
    def rbegin(self): return _libmorfo_python.ListWord_rbegin(self)
    def rend(self): return _libmorfo_python.ListWord_rend(self)
    def pop_back(self): return _libmorfo_python.ListWord_pop_back(self)
    def erase(self, *args): return _libmorfo_python.ListWord_erase(self, *args)
    def __init__(self, *args): 
        this = _libmorfo_python.new_ListWord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libmorfo_python.ListWord_push_back(self, *args)
    def front(self): return _libmorfo_python.ListWord_front(self)
    def back(self): return _libmorfo_python.ListWord_back(self)
    def assign(self, *args): return _libmorfo_python.ListWord_assign(self, *args)
    def resize(self, *args): return _libmorfo_python.ListWord_resize(self, *args)
    def insert(self, *args): return _libmorfo_python.ListWord_insert(self, *args)
    def pop_front(self): return _libmorfo_python.ListWord_pop_front(self)
    def push_front(self, *args): return _libmorfo_python.ListWord_push_front(self, *args)
    def reverse(self): return _libmorfo_python.ListWord_reverse(self)
    __swig_destroy__ = _libmorfo_python.delete_ListWord
    __del__ = lambda self : None;
ListWord_swigregister = _libmorfo_python.ListWord_swigregister
ListWord_swigregister(ListWord)

class ListAnalysis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListAnalysis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListAnalysis, name)
    __repr__ = _swig_repr
    def iterator(self): return _libmorfo_python.ListAnalysis_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libmorfo_python.ListAnalysis___nonzero__(self)
    def __bool__(self): return _libmorfo_python.ListAnalysis___bool__(self)
    def __len__(self): return _libmorfo_python.ListAnalysis___len__(self)
    def pop(self): return _libmorfo_python.ListAnalysis_pop(self)
    def __getslice__(self, *args): return _libmorfo_python.ListAnalysis___getslice__(self, *args)
    def __setslice__(self, *args): return _libmorfo_python.ListAnalysis___setslice__(self, *args)
    def __delslice__(self, *args): return _libmorfo_python.ListAnalysis___delslice__(self, *args)
    def __delitem__(self, *args): return _libmorfo_python.ListAnalysis___delitem__(self, *args)
    def __getitem__(self, *args): return _libmorfo_python.ListAnalysis___getitem__(self, *args)
    def __setitem__(self, *args): return _libmorfo_python.ListAnalysis___setitem__(self, *args)
    def append(self, *args): return _libmorfo_python.ListAnalysis_append(self, *args)
    def empty(self): return _libmorfo_python.ListAnalysis_empty(self)
    def size(self): return _libmorfo_python.ListAnalysis_size(self)
    def clear(self): return _libmorfo_python.ListAnalysis_clear(self)
    def swap(self, *args): return _libmorfo_python.ListAnalysis_swap(self, *args)
    def get_allocator(self): return _libmorfo_python.ListAnalysis_get_allocator(self)
    def begin(self): return _libmorfo_python.ListAnalysis_begin(self)
    def end(self): return _libmorfo_python.ListAnalysis_end(self)
    def rbegin(self): return _libmorfo_python.ListAnalysis_rbegin(self)
    def rend(self): return _libmorfo_python.ListAnalysis_rend(self)
    def pop_back(self): return _libmorfo_python.ListAnalysis_pop_back(self)
    def erase(self, *args): return _libmorfo_python.ListAnalysis_erase(self, *args)
    def __init__(self, *args): 
        this = _libmorfo_python.new_ListAnalysis(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libmorfo_python.ListAnalysis_push_back(self, *args)
    def front(self): return _libmorfo_python.ListAnalysis_front(self)
    def back(self): return _libmorfo_python.ListAnalysis_back(self)
    def assign(self, *args): return _libmorfo_python.ListAnalysis_assign(self, *args)
    def resize(self, *args): return _libmorfo_python.ListAnalysis_resize(self, *args)
    def insert(self, *args): return _libmorfo_python.ListAnalysis_insert(self, *args)
    def pop_front(self): return _libmorfo_python.ListAnalysis_pop_front(self)
    def push_front(self, *args): return _libmorfo_python.ListAnalysis_push_front(self, *args)
    def reverse(self): return _libmorfo_python.ListAnalysis_reverse(self)
    __swig_destroy__ = _libmorfo_python.delete_ListAnalysis
    __del__ = lambda self : None;
ListAnalysis_swigregister = _libmorfo_python.ListAnalysis_swigregister
ListAnalysis_swigregister(ListAnalysis)

class ListSentence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListSentence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListSentence, name)
    __repr__ = _swig_repr
    def iterator(self): return _libmorfo_python.ListSentence_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libmorfo_python.ListSentence___nonzero__(self)
    def __bool__(self): return _libmorfo_python.ListSentence___bool__(self)
    def __len__(self): return _libmorfo_python.ListSentence___len__(self)
    def pop(self): return _libmorfo_python.ListSentence_pop(self)
    def __getslice__(self, *args): return _libmorfo_python.ListSentence___getslice__(self, *args)
    def __setslice__(self, *args): return _libmorfo_python.ListSentence___setslice__(self, *args)
    def __delslice__(self, *args): return _libmorfo_python.ListSentence___delslice__(self, *args)
    def __delitem__(self, *args): return _libmorfo_python.ListSentence___delitem__(self, *args)
    def __getitem__(self, *args): return _libmorfo_python.ListSentence___getitem__(self, *args)
    def __setitem__(self, *args): return _libmorfo_python.ListSentence___setitem__(self, *args)
    def append(self, *args): return _libmorfo_python.ListSentence_append(self, *args)
    def empty(self): return _libmorfo_python.ListSentence_empty(self)
    def size(self): return _libmorfo_python.ListSentence_size(self)
    def clear(self): return _libmorfo_python.ListSentence_clear(self)
    def swap(self, *args): return _libmorfo_python.ListSentence_swap(self, *args)
    def get_allocator(self): return _libmorfo_python.ListSentence_get_allocator(self)
    def begin(self): return _libmorfo_python.ListSentence_begin(self)
    def end(self): return _libmorfo_python.ListSentence_end(self)
    def rbegin(self): return _libmorfo_python.ListSentence_rbegin(self)
    def rend(self): return _libmorfo_python.ListSentence_rend(self)
    def pop_back(self): return _libmorfo_python.ListSentence_pop_back(self)
    def erase(self, *args): return _libmorfo_python.ListSentence_erase(self, *args)
    def __init__(self, *args): 
        this = _libmorfo_python.new_ListSentence(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libmorfo_python.ListSentence_push_back(self, *args)
    def front(self): return _libmorfo_python.ListSentence_front(self)
    def back(self): return _libmorfo_python.ListSentence_back(self)
    def assign(self, *args): return _libmorfo_python.ListSentence_assign(self, *args)
    def resize(self, *args): return _libmorfo_python.ListSentence_resize(self, *args)
    def insert(self, *args): return _libmorfo_python.ListSentence_insert(self, *args)
    def pop_front(self): return _libmorfo_python.ListSentence_pop_front(self)
    def push_front(self, *args): return _libmorfo_python.ListSentence_push_front(self, *args)
    def reverse(self): return _libmorfo_python.ListSentence_reverse(self)
    __swig_destroy__ = _libmorfo_python.delete_ListSentence
    __del__ = lambda self : None;
ListSentence_swigregister = _libmorfo_python.ListSentence_swigregister
ListSentence_swigregister(ListSentence)

class ListParagraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListParagraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListParagraph, name)
    __repr__ = _swig_repr
    def iterator(self): return _libmorfo_python.ListParagraph_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libmorfo_python.ListParagraph___nonzero__(self)
    def __bool__(self): return _libmorfo_python.ListParagraph___bool__(self)
    def __len__(self): return _libmorfo_python.ListParagraph___len__(self)
    def pop(self): return _libmorfo_python.ListParagraph_pop(self)
    def __getslice__(self, *args): return _libmorfo_python.ListParagraph___getslice__(self, *args)
    def __setslice__(self, *args): return _libmorfo_python.ListParagraph___setslice__(self, *args)
    def __delslice__(self, *args): return _libmorfo_python.ListParagraph___delslice__(self, *args)
    def __delitem__(self, *args): return _libmorfo_python.ListParagraph___delitem__(self, *args)
    def __getitem__(self, *args): return _libmorfo_python.ListParagraph___getitem__(self, *args)
    def __setitem__(self, *args): return _libmorfo_python.ListParagraph___setitem__(self, *args)
    def append(self, *args): return _libmorfo_python.ListParagraph_append(self, *args)
    def empty(self): return _libmorfo_python.ListParagraph_empty(self)
    def size(self): return _libmorfo_python.ListParagraph_size(self)
    def clear(self): return _libmorfo_python.ListParagraph_clear(self)
    def swap(self, *args): return _libmorfo_python.ListParagraph_swap(self, *args)
    def get_allocator(self): return _libmorfo_python.ListParagraph_get_allocator(self)
    def begin(self): return _libmorfo_python.ListParagraph_begin(self)
    def end(self): return _libmorfo_python.ListParagraph_end(self)
    def rbegin(self): return _libmorfo_python.ListParagraph_rbegin(self)
    def rend(self): return _libmorfo_python.ListParagraph_rend(self)
    def pop_back(self): return _libmorfo_python.ListParagraph_pop_back(self)
    def erase(self, *args): return _libmorfo_python.ListParagraph_erase(self, *args)
    def __init__(self, *args): 
        this = _libmorfo_python.new_ListParagraph(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libmorfo_python.ListParagraph_push_back(self, *args)
    def front(self): return _libmorfo_python.ListParagraph_front(self)
    def back(self): return _libmorfo_python.ListParagraph_back(self)
    def assign(self, *args): return _libmorfo_python.ListParagraph_assign(self, *args)
    def resize(self, *args): return _libmorfo_python.ListParagraph_resize(self, *args)
    def insert(self, *args): return _libmorfo_python.ListParagraph_insert(self, *args)
    def pop_front(self): return _libmorfo_python.ListParagraph_pop_front(self)
    def push_front(self, *args): return _libmorfo_python.ListParagraph_push_front(self, *args)
    def reverse(self): return _libmorfo_python.ListParagraph_reverse(self)
    __swig_destroy__ = _libmorfo_python.delete_ListParagraph
    __del__ = lambda self : None;
ListParagraph_swigregister = _libmorfo_python.ListParagraph_swigregister
ListParagraph_swigregister(ListParagraph)

class ListString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListString, name)
    __repr__ = _swig_repr
    def iterator(self): return _libmorfo_python.ListString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libmorfo_python.ListString___nonzero__(self)
    def __bool__(self): return _libmorfo_python.ListString___bool__(self)
    def __len__(self): return _libmorfo_python.ListString___len__(self)
    def pop(self): return _libmorfo_python.ListString_pop(self)
    def __getslice__(self, *args): return _libmorfo_python.ListString___getslice__(self, *args)
    def __setslice__(self, *args): return _libmorfo_python.ListString___setslice__(self, *args)
    def __delslice__(self, *args): return _libmorfo_python.ListString___delslice__(self, *args)
    def __delitem__(self, *args): return _libmorfo_python.ListString___delitem__(self, *args)
    def __getitem__(self, *args): return _libmorfo_python.ListString___getitem__(self, *args)
    def __setitem__(self, *args): return _libmorfo_python.ListString___setitem__(self, *args)
    def append(self, *args): return _libmorfo_python.ListString_append(self, *args)
    def empty(self): return _libmorfo_python.ListString_empty(self)
    def size(self): return _libmorfo_python.ListString_size(self)
    def clear(self): return _libmorfo_python.ListString_clear(self)
    def swap(self, *args): return _libmorfo_python.ListString_swap(self, *args)
    def get_allocator(self): return _libmorfo_python.ListString_get_allocator(self)
    def begin(self): return _libmorfo_python.ListString_begin(self)
    def end(self): return _libmorfo_python.ListString_end(self)
    def rbegin(self): return _libmorfo_python.ListString_rbegin(self)
    def rend(self): return _libmorfo_python.ListString_rend(self)
    def pop_back(self): return _libmorfo_python.ListString_pop_back(self)
    def erase(self, *args): return _libmorfo_python.ListString_erase(self, *args)
    def __init__(self, *args): 
        this = _libmorfo_python.new_ListString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libmorfo_python.ListString_push_back(self, *args)
    def front(self): return _libmorfo_python.ListString_front(self)
    def back(self): return _libmorfo_python.ListString_back(self)
    def assign(self, *args): return _libmorfo_python.ListString_assign(self, *args)
    def resize(self, *args): return _libmorfo_python.ListString_resize(self, *args)
    def insert(self, *args): return _libmorfo_python.ListString_insert(self, *args)
    def pop_front(self): return _libmorfo_python.ListString_pop_front(self)
    def push_front(self, *args): return _libmorfo_python.ListString_push_front(self, *args)
    def reverse(self): return _libmorfo_python.ListString_reverse(self)
    __swig_destroy__ = _libmorfo_python.delete_ListString
    __del__ = lambda self : None;
ListString_swigregister = _libmorfo_python.ListString_swigregister
ListString_swigregister(ListString)

class ListInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _libmorfo_python.ListInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libmorfo_python.ListInt___nonzero__(self)
    def __bool__(self): return _libmorfo_python.ListInt___bool__(self)
    def __len__(self): return _libmorfo_python.ListInt___len__(self)
    def pop(self): return _libmorfo_python.ListInt_pop(self)
    def __getslice__(self, *args): return _libmorfo_python.ListInt___getslice__(self, *args)
    def __setslice__(self, *args): return _libmorfo_python.ListInt___setslice__(self, *args)
    def __delslice__(self, *args): return _libmorfo_python.ListInt___delslice__(self, *args)
    def __delitem__(self, *args): return _libmorfo_python.ListInt___delitem__(self, *args)
    def __getitem__(self, *args): return _libmorfo_python.ListInt___getitem__(self, *args)
    def __setitem__(self, *args): return _libmorfo_python.ListInt___setitem__(self, *args)
    def append(self, *args): return _libmorfo_python.ListInt_append(self, *args)
    def empty(self): return _libmorfo_python.ListInt_empty(self)
    def size(self): return _libmorfo_python.ListInt_size(self)
    def clear(self): return _libmorfo_python.ListInt_clear(self)
    def swap(self, *args): return _libmorfo_python.ListInt_swap(self, *args)
    def get_allocator(self): return _libmorfo_python.ListInt_get_allocator(self)
    def begin(self): return _libmorfo_python.ListInt_begin(self)
    def end(self): return _libmorfo_python.ListInt_end(self)
    def rbegin(self): return _libmorfo_python.ListInt_rbegin(self)
    def rend(self): return _libmorfo_python.ListInt_rend(self)
    def pop_back(self): return _libmorfo_python.ListInt_pop_back(self)
    def erase(self, *args): return _libmorfo_python.ListInt_erase(self, *args)
    def __init__(self, *args): 
        this = _libmorfo_python.new_ListInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libmorfo_python.ListInt_push_back(self, *args)
    def front(self): return _libmorfo_python.ListInt_front(self)
    def back(self): return _libmorfo_python.ListInt_back(self)
    def assign(self, *args): return _libmorfo_python.ListInt_assign(self, *args)
    def resize(self, *args): return _libmorfo_python.ListInt_resize(self, *args)
    def insert(self, *args): return _libmorfo_python.ListInt_insert(self, *args)
    def pop_front(self): return _libmorfo_python.ListInt_pop_front(self)
    def push_front(self, *args): return _libmorfo_python.ListInt_push_front(self, *args)
    def reverse(self): return _libmorfo_python.ListInt_reverse(self)
    __swig_destroy__ = _libmorfo_python.delete_ListInt
    __del__ = lambda self : None;
ListInt_swigregister = _libmorfo_python.ListInt_swigregister
ListInt_swigregister(ListInt)

class VectorListInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorListInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorListInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _libmorfo_python.VectorListInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libmorfo_python.VectorListInt___nonzero__(self)
    def __bool__(self): return _libmorfo_python.VectorListInt___bool__(self)
    def __len__(self): return _libmorfo_python.VectorListInt___len__(self)
    def pop(self): return _libmorfo_python.VectorListInt_pop(self)
    def __getslice__(self, *args): return _libmorfo_python.VectorListInt___getslice__(self, *args)
    def __setslice__(self, *args): return _libmorfo_python.VectorListInt___setslice__(self, *args)
    def __delslice__(self, *args): return _libmorfo_python.VectorListInt___delslice__(self, *args)
    def __delitem__(self, *args): return _libmorfo_python.VectorListInt___delitem__(self, *args)
    def __getitem__(self, *args): return _libmorfo_python.VectorListInt___getitem__(self, *args)
    def __setitem__(self, *args): return _libmorfo_python.VectorListInt___setitem__(self, *args)
    def append(self, *args): return _libmorfo_python.VectorListInt_append(self, *args)
    def empty(self): return _libmorfo_python.VectorListInt_empty(self)
    def size(self): return _libmorfo_python.VectorListInt_size(self)
    def clear(self): return _libmorfo_python.VectorListInt_clear(self)
    def swap(self, *args): return _libmorfo_python.VectorListInt_swap(self, *args)
    def get_allocator(self): return _libmorfo_python.VectorListInt_get_allocator(self)
    def begin(self): return _libmorfo_python.VectorListInt_begin(self)
    def end(self): return _libmorfo_python.VectorListInt_end(self)
    def rbegin(self): return _libmorfo_python.VectorListInt_rbegin(self)
    def rend(self): return _libmorfo_python.VectorListInt_rend(self)
    def pop_back(self): return _libmorfo_python.VectorListInt_pop_back(self)
    def erase(self, *args): return _libmorfo_python.VectorListInt_erase(self, *args)
    def __init__(self, *args): 
        this = _libmorfo_python.new_VectorListInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libmorfo_python.VectorListInt_push_back(self, *args)
    def front(self): return _libmorfo_python.VectorListInt_front(self)
    def back(self): return _libmorfo_python.VectorListInt_back(self)
    def assign(self, *args): return _libmorfo_python.VectorListInt_assign(self, *args)
    def resize(self, *args): return _libmorfo_python.VectorListInt_resize(self, *args)
    def insert(self, *args): return _libmorfo_python.VectorListInt_insert(self, *args)
    def reserve(self, *args): return _libmorfo_python.VectorListInt_reserve(self, *args)
    def capacity(self): return _libmorfo_python.VectorListInt_capacity(self)
    __swig_destroy__ = _libmorfo_python.delete_VectorListInt
    __del__ = lambda self : None;
VectorListInt_swigregister = _libmorfo_python.VectorListInt_swigregister
VectorListInt_swigregister(VectorListInt)

class VectorListString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorListString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorListString, name)
    __repr__ = _swig_repr
    def iterator(self): return _libmorfo_python.VectorListString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libmorfo_python.VectorListString___nonzero__(self)
    def __bool__(self): return _libmorfo_python.VectorListString___bool__(self)
    def __len__(self): return _libmorfo_python.VectorListString___len__(self)
    def pop(self): return _libmorfo_python.VectorListString_pop(self)
    def __getslice__(self, *args): return _libmorfo_python.VectorListString___getslice__(self, *args)
    def __setslice__(self, *args): return _libmorfo_python.VectorListString___setslice__(self, *args)
    def __delslice__(self, *args): return _libmorfo_python.VectorListString___delslice__(self, *args)
    def __delitem__(self, *args): return _libmorfo_python.VectorListString___delitem__(self, *args)
    def __getitem__(self, *args): return _libmorfo_python.VectorListString___getitem__(self, *args)
    def __setitem__(self, *args): return _libmorfo_python.VectorListString___setitem__(self, *args)
    def append(self, *args): return _libmorfo_python.VectorListString_append(self, *args)
    def empty(self): return _libmorfo_python.VectorListString_empty(self)
    def size(self): return _libmorfo_python.VectorListString_size(self)
    def clear(self): return _libmorfo_python.VectorListString_clear(self)
    def swap(self, *args): return _libmorfo_python.VectorListString_swap(self, *args)
    def get_allocator(self): return _libmorfo_python.VectorListString_get_allocator(self)
    def begin(self): return _libmorfo_python.VectorListString_begin(self)
    def end(self): return _libmorfo_python.VectorListString_end(self)
    def rbegin(self): return _libmorfo_python.VectorListString_rbegin(self)
    def rend(self): return _libmorfo_python.VectorListString_rend(self)
    def pop_back(self): return _libmorfo_python.VectorListString_pop_back(self)
    def erase(self, *args): return _libmorfo_python.VectorListString_erase(self, *args)
    def __init__(self, *args): 
        this = _libmorfo_python.new_VectorListString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libmorfo_python.VectorListString_push_back(self, *args)
    def front(self): return _libmorfo_python.VectorListString_front(self)
    def back(self): return _libmorfo_python.VectorListString_back(self)
    def assign(self, *args): return _libmorfo_python.VectorListString_assign(self, *args)
    def resize(self, *args): return _libmorfo_python.VectorListString_resize(self, *args)
    def insert(self, *args): return _libmorfo_python.VectorListString_insert(self, *args)
    def reserve(self, *args): return _libmorfo_python.VectorListString_reserve(self, *args)
    def capacity(self): return _libmorfo_python.VectorListString_capacity(self)
    __swig_destroy__ = _libmorfo_python.delete_VectorListString
    __del__ = lambda self : None;
VectorListString_swigregister = _libmorfo_python.VectorListString_swigregister
VectorListString_swigregister(VectorListString)

class TreeNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _libmorfo_python.TreeNode_info_set
    __swig_getmethods__["info"] = _libmorfo_python.TreeNode_info_get
    if _newclass:info = _swig_property(_libmorfo_python.TreeNode_info_get, _libmorfo_python.TreeNode_info_set)
    def __init__(self, *args): 
        this = _libmorfo_python.new_TreeNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libmorfo_python.delete_TreeNode
    __del__ = lambda self : None;
    def num_children(self): return _libmorfo_python.TreeNode_num_children(self)
    def nth_child(self, *args): return _libmorfo_python.TreeNode_nth_child(self, *args)
    def nth_child_ref(self, *args): return _libmorfo_python.TreeNode_nth_child_ref(self, *args)
    def get_info(self): return _libmorfo_python.TreeNode_get_info(self)
    def append_child(self, *args): return _libmorfo_python.TreeNode_append_child(self, *args)
    def hang_child(self, *args): return _libmorfo_python.TreeNode_hang_child(self, *args)
    def clear(self): return _libmorfo_python.TreeNode_clear(self)
    def empty(self): return _libmorfo_python.TreeNode_empty(self)
    def sibling_begin(self): return _libmorfo_python.TreeNode_sibling_begin(self)
    def sibling_end(self): return _libmorfo_python.TreeNode_sibling_end(self)
    def begin(self): return _libmorfo_python.TreeNode_begin(self)
    def end(self): return _libmorfo_python.TreeNode_end(self)
TreeNode_swigregister = _libmorfo_python.TreeNode_swigregister
TreeNode_swigregister(TreeNode)

class TreeDepnode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeDepnode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeDepnode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["info"] = _libmorfo_python.TreeDepnode_info_set
    __swig_getmethods__["info"] = _libmorfo_python.TreeDepnode_info_get
    if _newclass:info = _swig_property(_libmorfo_python.TreeDepnode_info_get, _libmorfo_python.TreeDepnode_info_set)
    def __init__(self, *args): 
        this = _libmorfo_python.new_TreeDepnode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libmorfo_python.delete_TreeDepnode
    __del__ = lambda self : None;
    def num_children(self): return _libmorfo_python.TreeDepnode_num_children(self)
    def nth_child(self, *args): return _libmorfo_python.TreeDepnode_nth_child(self, *args)
    def nth_child_ref(self, *args): return _libmorfo_python.TreeDepnode_nth_child_ref(self, *args)
    def get_info(self): return _libmorfo_python.TreeDepnode_get_info(self)
    def append_child(self, *args): return _libmorfo_python.TreeDepnode_append_child(self, *args)
    def hang_child(self, *args): return _libmorfo_python.TreeDepnode_hang_child(self, *args)
    def clear(self): return _libmorfo_python.TreeDepnode_clear(self)
    def empty(self): return _libmorfo_python.TreeDepnode_empty(self)
    def sibling_begin(self): return _libmorfo_python.TreeDepnode_sibling_begin(self)
    def sibling_end(self): return _libmorfo_python.TreeDepnode_sibling_end(self)
    def begin(self): return _libmorfo_python.TreeDepnode_begin(self)
    def end(self): return _libmorfo_python.TreeDepnode_end(self)
TreeDepnode_swigregister = _libmorfo_python.TreeDepnode_swigregister
TreeDepnode_swigregister(TreeDepnode)

class analysis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, analysis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, analysis, name)
    __repr__ = _swig_repr
    __swig_setmethods__["user"] = _libmorfo_python.analysis_user_set
    __swig_getmethods__["user"] = _libmorfo_python.analysis_user_get
    if _newclass:user = _swig_property(_libmorfo_python.analysis_user_get, _libmorfo_python.analysis_user_set)
    def __init__(self, *args): 
        this = _libmorfo_python.new_analysis(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_lemma(self, *args): return _libmorfo_python.analysis_set_lemma(self, *args)
    def set_parole(self, *args): return _libmorfo_python.analysis_set_parole(self, *args)
    def set_prob(self, *args): return _libmorfo_python.analysis_set_prob(self, *args)
    def set_retokenizable(self, *args): return _libmorfo_python.analysis_set_retokenizable(self, *args)
    def has_prob(self): return _libmorfo_python.analysis_has_prob(self)
    def get_lemma(self): return _libmorfo_python.analysis_get_lemma(self)
    def get_parole(self): return _libmorfo_python.analysis_get_parole(self)
    def get_short_parole(self, *args): return _libmorfo_python.analysis_get_short_parole(self, *args)
    def get_prob(self): return _libmorfo_python.analysis_get_prob(self)
    def is_retokenizable(self): return _libmorfo_python.analysis_is_retokenizable(self)
    def get_retokenizable(self): return _libmorfo_python.analysis_get_retokenizable(self)
    def get_senses_string(self): return _libmorfo_python.analysis_get_senses_string(self)
    __swig_destroy__ = _libmorfo_python.delete_analysis
    __del__ = lambda self : None;
analysis_swigregister = _libmorfo_python.analysis_swigregister
analysis_swigregister(analysis)

class word(ListAnalysis):
    __swig_setmethods__ = {}
    for _s in [ListAnalysis]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, word, name, value)
    __swig_getmethods__ = {}
    for _s in [ListAnalysis]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, word, name)
    __repr__ = _swig_repr
    __swig_setmethods__["user"] = _libmorfo_python.word_user_set
    __swig_getmethods__["user"] = _libmorfo_python.word_user_get
    if _newclass:user = _swig_property(_libmorfo_python.word_user_get, _libmorfo_python.word_user_set)
    def __init__(self, *args): 
        this = _libmorfo_python.new_word(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_n_selected(self): return _libmorfo_python.word_get_n_selected(self)
    def get_n_unselected(self): return _libmorfo_python.word_get_n_unselected(self)
    def is_multiword(self): return _libmorfo_python.word_is_multiword(self)
    def get_n_words_mw(self): return _libmorfo_python.word_get_n_words_mw(self)
    def get_words_mw(self): return _libmorfo_python.word_get_words_mw(self)
    def get_form(self): return _libmorfo_python.word_get_form(self)
    def selected_begin(self, *args): return _libmorfo_python.word_selected_begin(self, *args)
    def selected_end(self, *args): return _libmorfo_python.word_selected_end(self, *args)
    def unselected_begin(self, *args): return _libmorfo_python.word_unselected_begin(self, *args)
    def unselected_end(self, *args): return _libmorfo_python.word_unselected_end(self, *args)
    def get_lemma(self): return _libmorfo_python.word_get_lemma(self)
    def get_parole(self): return _libmorfo_python.word_get_parole(self)
    def get_short_parole(self, *args): return _libmorfo_python.word_get_short_parole(self, *args)
    def get_senses_string(self): return _libmorfo_python.word_get_senses_string(self)
    def get_span_start(self): return _libmorfo_python.word_get_span_start(self)
    def get_span_finish(self): return _libmorfo_python.word_get_span_finish(self)
    def found_in_dict(self): return _libmorfo_python.word_found_in_dict(self)
    def set_found_in_dict(self, *args): return _libmorfo_python.word_set_found_in_dict(self, *args)
    def has_retokenizable(self): return _libmorfo_python.word_has_retokenizable(self)
    def add_analysis(self, *args): return _libmorfo_python.word_add_analysis(self, *args)
    def set_analysis(self, *args): return _libmorfo_python.word_set_analysis(self, *args)
    def set_form(self, *args): return _libmorfo_python.word_set_form(self, *args)
    def set_span(self, *args): return _libmorfo_python.word_set_span(self, *args)
    def find_tag_match(self, *args): return _libmorfo_python.word_find_tag_match(self, *args)
    def get_n_analysis(self): return _libmorfo_python.word_get_n_analysis(self)
    def copy_analysis(self, *args): return _libmorfo_python.word_copy_analysis(self, *args)
    def unselect_all_analysis(self): return _libmorfo_python.word_unselect_all_analysis(self)
    def select_all_analysis(self): return _libmorfo_python.word_select_all_analysis(self)
    def select_analysis(self, *args): return _libmorfo_python.word_select_analysis(self, *args)
    def unselect_analysis(self, *args): return _libmorfo_python.word_unselect_analysis(self, *args)
    def get_analysis(self): return _libmorfo_python.word_get_analysis(self)
    def analysis_begin(self, *args): return _libmorfo_python.word_analysis_begin(self, *args)
    def analysis_end(self, *args): return _libmorfo_python.word_analysis_end(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_word
    __del__ = lambda self : None;
word_swigregister = _libmorfo_python.word_swigregister
word_swigregister(word)

class node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, node, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_node(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_label(self): return _libmorfo_python.node_get_label(self)
    def get_word(self): return _libmorfo_python.node_get_word(self)
    def set_word(self, *args): return _libmorfo_python.node_set_word(self, *args)
    def set_label(self, *args): return _libmorfo_python.node_set_label(self, *args)
    def is_head(self): return _libmorfo_python.node_is_head(self)
    def set_head(self, *args): return _libmorfo_python.node_set_head(self, *args)
    def is_chunk(self): return _libmorfo_python.node_is_chunk(self)
    def set_chunk(self, *args): return _libmorfo_python.node_set_chunk(self, *args)
    def get_chunk_ord(self): return _libmorfo_python.node_get_chunk_ord(self)
    __swig_destroy__ = _libmorfo_python.delete_node
    __del__ = lambda self : None;
node_swigregister = _libmorfo_python.node_swigregister
node_swigregister(node)

class parse_tree(TreeNode):
    __swig_setmethods__ = {}
    for _s in [TreeNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, parse_tree, name, value)
    __swig_getmethods__ = {}
    for _s in [TreeNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, parse_tree, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_parse_tree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libmorfo_python.delete_parse_tree
    __del__ = lambda self : None;
parse_tree_swigregister = _libmorfo_python.parse_tree_swigregister
parse_tree_swigregister(parse_tree)

class depnode(node):
    __swig_setmethods__ = {}
    for _s in [node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, depnode, name, value)
    __swig_getmethods__ = {}
    for _s in [node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, depnode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_depnode(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_link(self, *args): return _libmorfo_python.depnode_set_link(self, *args)
    def get_link(self): return _libmorfo_python.depnode_get_link(self)
    def get_link_ref(self): return _libmorfo_python.depnode_get_link_ref(self)
    def set_label(self, *args): return _libmorfo_python.depnode_set_label(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_depnode
    __del__ = lambda self : None;
depnode_swigregister = _libmorfo_python.depnode_swigregister
depnode_swigregister(depnode)

class dep_tree(TreeDepnode):
    __swig_setmethods__ = {}
    for _s in [TreeDepnode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, dep_tree, name, value)
    __swig_getmethods__ = {}
    for _s in [TreeDepnode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, dep_tree, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_dep_tree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libmorfo_python.delete_dep_tree
    __del__ = lambda self : None;
dep_tree_swigregister = _libmorfo_python.dep_tree_swigregister
dep_tree_swigregister(dep_tree)

class sentence(ListWord):
    __swig_setmethods__ = {}
    for _s in [ListWord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sentence, name, value)
    __swig_getmethods__ = {}
    for _s in [ListWord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sentence, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libmorfo_python.new_sentence()
        try: self.this.append(this)
        except: self.this = this
    def set_parse_tree(self, *args): return _libmorfo_python.sentence_set_parse_tree(self, *args)
    def get_parse_tree(self): return _libmorfo_python.sentence_get_parse_tree(self)
    def is_parsed(self): return _libmorfo_python.sentence_is_parsed(self)
    def get_dep_tree(self): return _libmorfo_python.sentence_get_dep_tree(self)
    def set_dep_tree(self, *args): return _libmorfo_python.sentence_set_dep_tree(self, *args)
    def is_dep_parsed(self): return _libmorfo_python.sentence_is_dep_parsed(self)
    def get_words(self): return _libmorfo_python.sentence_get_words(self)
    def words_begin(self, *args): return _libmorfo_python.sentence_words_begin(self, *args)
    def words_end(self, *args): return _libmorfo_python.sentence_words_end(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_sentence
    __del__ = lambda self : None;
sentence_swigregister = _libmorfo_python.sentence_swigregister
sentence_swigregister(sentence)

class paragraph(ListSentence):
    __swig_setmethods__ = {}
    for _s in [ListSentence]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, paragraph, name, value)
    __swig_getmethods__ = {}
    for _s in [ListSentence]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, paragraph, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libmorfo_python.new_paragraph()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libmorfo_python.delete_paragraph
    __del__ = lambda self : None;
paragraph_swigregister = _libmorfo_python.paragraph_swigregister
paragraph_swigregister(paragraph)

class document(ListParagraph):
    __swig_setmethods__ = {}
    for _s in [ListParagraph]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, document, name, value)
    __swig_getmethods__ = {}
    for _s in [ListParagraph]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, document, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libmorfo_python.new_document()
        try: self.this.append(this)
        except: self.this = this
    def add_positive(self, *args): return _libmorfo_python.document_add_positive(self, *args)
    def get_coref_group(self, *args): return _libmorfo_python.document_get_coref_group(self, *args)
    def get_coref_nodes(self, *args): return _libmorfo_python.document_get_coref_nodes(self, *args)
    def is_coref(self, *args): return _libmorfo_python.document_is_coref(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_document
    __del__ = lambda self : None;
document_swigregister = _libmorfo_python.document_swigregister
document_swigregister(document)

class fex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_fex(*args)
        try: self.this.append(this)
        except: self.this = this
    def encode_name(self, *args): return _libmorfo_python.fex_encode_name(self, *args)
    def encode_int(self, *args): return _libmorfo_python.fex_encode_int(self, *args)
    def clear_lexicon(self): return _libmorfo_python.fex_clear_lexicon(self)
    def add_lexicon(self, *args): return _libmorfo_python.fex_add_lexicon(self, *args)
    def save_lexicon(self, *args): return _libmorfo_python.fex_save_lexicon(self, *args)
    def load_lexicon(self, *args): return _libmorfo_python.fex_load_lexicon(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_fex
    __del__ = lambda self : None;
fex_swigregister = _libmorfo_python.fex_swigregister
fex_swigregister(fex)

class traces(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, traces, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, traces, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TraceLevel"] = _libmorfo_python.traces_TraceLevel_set
    __swig_getmethods__["TraceLevel"] = _libmorfo_python.traces_TraceLevel_get
    if _newclass:TraceLevel = _swig_property(_libmorfo_python.traces_TraceLevel_get, _libmorfo_python.traces_TraceLevel_set)
    __swig_setmethods__["TraceModule"] = _libmorfo_python.traces_TraceModule_set
    __swig_getmethods__["TraceModule"] = _libmorfo_python.traces_TraceModule_get
    if _newclass:TraceModule = _swig_property(_libmorfo_python.traces_TraceModule_get, _libmorfo_python.traces_TraceModule_set)
    def __init__(self): 
        this = _libmorfo_python.new_traces()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libmorfo_python.delete_traces
    __del__ = lambda self : None;
traces_swigregister = _libmorfo_python.traces_swigregister
traces_swigregister(traces)
cvar = _libmorfo_python.cvar

class tokenizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tokenizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tokenizer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_tokenizer(*args)
        try: self.this.append(this)
        except: self.this = this
    def tokenize(self, *args): return _libmorfo_python.tokenizer_tokenize(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_tokenizer
    __del__ = lambda self : None;
tokenizer_swigregister = _libmorfo_python.tokenizer_swigregister
tokenizer_swigregister(tokenizer)

class splitter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, splitter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, splitter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_splitter(*args)
        try: self.this.append(this)
        except: self.this = this
    def split(self, *args): return _libmorfo_python.splitter_split(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_splitter
    __del__ = lambda self : None;
splitter_swigregister = _libmorfo_python.splitter_swigregister
splitter_swigregister(splitter)

class maco_options(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, maco_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, maco_options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Lang"] = _libmorfo_python.maco_options_Lang_set
    __swig_getmethods__["Lang"] = _libmorfo_python.maco_options_Lang_get
    if _newclass:Lang = _swig_property(_libmorfo_python.maco_options_Lang_get, _libmorfo_python.maco_options_Lang_set)
    __swig_setmethods__["AffixAnalysis"] = _libmorfo_python.maco_options_AffixAnalysis_set
    __swig_getmethods__["AffixAnalysis"] = _libmorfo_python.maco_options_AffixAnalysis_get
    if _newclass:AffixAnalysis = _swig_property(_libmorfo_python.maco_options_AffixAnalysis_get, _libmorfo_python.maco_options_AffixAnalysis_set)
    __swig_setmethods__["MultiwordsDetection"] = _libmorfo_python.maco_options_MultiwordsDetection_set
    __swig_getmethods__["MultiwordsDetection"] = _libmorfo_python.maco_options_MultiwordsDetection_get
    if _newclass:MultiwordsDetection = _swig_property(_libmorfo_python.maco_options_MultiwordsDetection_get, _libmorfo_python.maco_options_MultiwordsDetection_set)
    __swig_setmethods__["NumbersDetection"] = _libmorfo_python.maco_options_NumbersDetection_set
    __swig_getmethods__["NumbersDetection"] = _libmorfo_python.maco_options_NumbersDetection_get
    if _newclass:NumbersDetection = _swig_property(_libmorfo_python.maco_options_NumbersDetection_get, _libmorfo_python.maco_options_NumbersDetection_set)
    __swig_setmethods__["PunctuationDetection"] = _libmorfo_python.maco_options_PunctuationDetection_set
    __swig_getmethods__["PunctuationDetection"] = _libmorfo_python.maco_options_PunctuationDetection_get
    if _newclass:PunctuationDetection = _swig_property(_libmorfo_python.maco_options_PunctuationDetection_get, _libmorfo_python.maco_options_PunctuationDetection_set)
    __swig_setmethods__["DatesDetection"] = _libmorfo_python.maco_options_DatesDetection_set
    __swig_getmethods__["DatesDetection"] = _libmorfo_python.maco_options_DatesDetection_get
    if _newclass:DatesDetection = _swig_property(_libmorfo_python.maco_options_DatesDetection_get, _libmorfo_python.maco_options_DatesDetection_set)
    __swig_setmethods__["QuantitiesDetection"] = _libmorfo_python.maco_options_QuantitiesDetection_set
    __swig_getmethods__["QuantitiesDetection"] = _libmorfo_python.maco_options_QuantitiesDetection_get
    if _newclass:QuantitiesDetection = _swig_property(_libmorfo_python.maco_options_QuantitiesDetection_get, _libmorfo_python.maco_options_QuantitiesDetection_set)
    __swig_setmethods__["DictionarySearch"] = _libmorfo_python.maco_options_DictionarySearch_set
    __swig_getmethods__["DictionarySearch"] = _libmorfo_python.maco_options_DictionarySearch_get
    if _newclass:DictionarySearch = _swig_property(_libmorfo_python.maco_options_DictionarySearch_get, _libmorfo_python.maco_options_DictionarySearch_set)
    __swig_setmethods__["ProbabilityAssignment"] = _libmorfo_python.maco_options_ProbabilityAssignment_set
    __swig_getmethods__["ProbabilityAssignment"] = _libmorfo_python.maco_options_ProbabilityAssignment_get
    if _newclass:ProbabilityAssignment = _swig_property(_libmorfo_python.maco_options_ProbabilityAssignment_get, _libmorfo_python.maco_options_ProbabilityAssignment_set)
    __swig_setmethods__["NERecognition"] = _libmorfo_python.maco_options_NERecognition_set
    __swig_getmethods__["NERecognition"] = _libmorfo_python.maco_options_NERecognition_get
    if _newclass:NERecognition = _swig_property(_libmorfo_python.maco_options_NERecognition_get, _libmorfo_python.maco_options_NERecognition_set)
    __swig_setmethods__["Decimal"] = _libmorfo_python.maco_options_Decimal_set
    __swig_getmethods__["Decimal"] = _libmorfo_python.maco_options_Decimal_get
    if _newclass:Decimal = _swig_property(_libmorfo_python.maco_options_Decimal_get, _libmorfo_python.maco_options_Decimal_set)
    __swig_setmethods__["Thousand"] = _libmorfo_python.maco_options_Thousand_set
    __swig_getmethods__["Thousand"] = _libmorfo_python.maco_options_Thousand_get
    if _newclass:Thousand = _swig_property(_libmorfo_python.maco_options_Thousand_get, _libmorfo_python.maco_options_Thousand_set)
    __swig_setmethods__["LocutionsFile"] = _libmorfo_python.maco_options_LocutionsFile_set
    __swig_getmethods__["LocutionsFile"] = _libmorfo_python.maco_options_LocutionsFile_get
    if _newclass:LocutionsFile = _swig_property(_libmorfo_python.maco_options_LocutionsFile_get, _libmorfo_python.maco_options_LocutionsFile_set)
    __swig_setmethods__["QuantitiesFile"] = _libmorfo_python.maco_options_QuantitiesFile_set
    __swig_getmethods__["QuantitiesFile"] = _libmorfo_python.maco_options_QuantitiesFile_get
    if _newclass:QuantitiesFile = _swig_property(_libmorfo_python.maco_options_QuantitiesFile_get, _libmorfo_python.maco_options_QuantitiesFile_set)
    __swig_setmethods__["AffixFile"] = _libmorfo_python.maco_options_AffixFile_set
    __swig_getmethods__["AffixFile"] = _libmorfo_python.maco_options_AffixFile_get
    if _newclass:AffixFile = _swig_property(_libmorfo_python.maco_options_AffixFile_get, _libmorfo_python.maco_options_AffixFile_set)
    __swig_setmethods__["ProbabilityFile"] = _libmorfo_python.maco_options_ProbabilityFile_set
    __swig_getmethods__["ProbabilityFile"] = _libmorfo_python.maco_options_ProbabilityFile_get
    if _newclass:ProbabilityFile = _swig_property(_libmorfo_python.maco_options_ProbabilityFile_get, _libmorfo_python.maco_options_ProbabilityFile_set)
    __swig_setmethods__["DictionaryFile"] = _libmorfo_python.maco_options_DictionaryFile_set
    __swig_getmethods__["DictionaryFile"] = _libmorfo_python.maco_options_DictionaryFile_get
    if _newclass:DictionaryFile = _swig_property(_libmorfo_python.maco_options_DictionaryFile_get, _libmorfo_python.maco_options_DictionaryFile_set)
    __swig_setmethods__["NPdataFile"] = _libmorfo_python.maco_options_NPdataFile_set
    __swig_getmethods__["NPdataFile"] = _libmorfo_python.maco_options_NPdataFile_get
    if _newclass:NPdataFile = _swig_property(_libmorfo_python.maco_options_NPdataFile_get, _libmorfo_python.maco_options_NPdataFile_set)
    __swig_setmethods__["PunctuationFile"] = _libmorfo_python.maco_options_PunctuationFile_set
    __swig_getmethods__["PunctuationFile"] = _libmorfo_python.maco_options_PunctuationFile_get
    if _newclass:PunctuationFile = _swig_property(_libmorfo_python.maco_options_PunctuationFile_get, _libmorfo_python.maco_options_PunctuationFile_set)
    __swig_setmethods__["ProbabilityThreshold"] = _libmorfo_python.maco_options_ProbabilityThreshold_set
    __swig_getmethods__["ProbabilityThreshold"] = _libmorfo_python.maco_options_ProbabilityThreshold_get
    if _newclass:ProbabilityThreshold = _swig_property(_libmorfo_python.maco_options_ProbabilityThreshold_get, _libmorfo_python.maco_options_ProbabilityThreshold_set)
    def __init__(self, *args): 
        this = _libmorfo_python.new_maco_options(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_active_modules(self, *args): return _libmorfo_python.maco_options_set_active_modules(self, *args)
    def set_nummerical_points(self, *args): return _libmorfo_python.maco_options_set_nummerical_points(self, *args)
    def set_data_files(self, *args): return _libmorfo_python.maco_options_set_data_files(self, *args)
    def set_threshold(self, *args): return _libmorfo_python.maco_options_set_threshold(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_maco_options
    __del__ = lambda self : None;
maco_options_swigregister = _libmorfo_python.maco_options_swigregister
maco_options_swigregister(maco_options)

class maco(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, maco, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, maco, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_maco(*args)
        try: self.this.append(this)
        except: self.this = this
    def analyze(self, *args): return _libmorfo_python.maco_analyze(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_maco
    __del__ = lambda self : None;
maco_swigregister = _libmorfo_python.maco_swigregister
maco_swigregister(maco)

class hmm_tagger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hmm_tagger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hmm_tagger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_hmm_tagger(*args)
        try: self.this.append(this)
        except: self.this = this
    def analyze(self, *args): return _libmorfo_python.hmm_tagger_analyze(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_hmm_tagger
    __del__ = lambda self : None;
hmm_tagger_swigregister = _libmorfo_python.hmm_tagger_swigregister
hmm_tagger_swigregister(hmm_tagger)

class relax_tagger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, relax_tagger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, relax_tagger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_relax_tagger(*args)
        try: self.this.append(this)
        except: self.this = this
    def analyze(self, *args): return _libmorfo_python.relax_tagger_analyze(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_relax_tagger
    __del__ = lambda self : None;
relax_tagger_swigregister = _libmorfo_python.relax_tagger_swigregister
relax_tagger_swigregister(relax_tagger)

class nec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_nec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libmorfo_python.delete_nec
    __del__ = lambda self : None;
    def analyze(self, *args): return _libmorfo_python.nec_analyze(self, *args)
nec_swigregister = _libmorfo_python.nec_swigregister
nec_swigregister(nec)

class chart_parser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, chart_parser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, chart_parser, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_chart_parser(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_start_symbol(self): return _libmorfo_python.chart_parser_get_start_symbol(self)
    def analyze(self, *args): return _libmorfo_python.chart_parser_analyze(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_chart_parser
    __del__ = lambda self : None;
chart_parser_swigregister = _libmorfo_python.chart_parser_swigregister
chart_parser_swigregister(chart_parser)

class dependency_parser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dependency_parser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dependency_parser, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libmorfo_python.delete_dependency_parser
    __del__ = lambda self : None;
    def analyze(self, *args): return _libmorfo_python.dependency_parser_analyze(self, *args)
dependency_parser_swigregister = _libmorfo_python.dependency_parser_swigregister
dependency_parser_swigregister(dependency_parser)

class dep_txala(dependency_parser):
    __swig_setmethods__ = {}
    for _s in [dependency_parser]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, dep_txala, name, value)
    __swig_getmethods__ = {}
    for _s in [dependency_parser]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, dep_txala, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_dep_txala(*args)
        try: self.this.append(this)
        except: self.this = this
    def analyze(self, *args): return _libmorfo_python.dep_txala_analyze(self, *args)
    __swig_destroy__ = _libmorfo_python.delete_dep_txala
    __del__ = lambda self : None;
dep_txala_swigregister = _libmorfo_python.dep_txala_swigregister
dep_txala_swigregister(dep_txala)

class senses(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, senses, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, senses, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_senses(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libmorfo_python.delete_senses
    __del__ = lambda self : None;
    def analyze(self, *args): return _libmorfo_python.senses_analyze(self, *args)
senses_swigregister = _libmorfo_python.senses_swigregister
senses_swigregister(senses)

class disambiguator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, disambiguator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, disambiguator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_disambiguator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libmorfo_python.delete_disambiguator
    __del__ = lambda self : None;
    def analyze(self, *args): return _libmorfo_python.disambiguator_analyze(self, *args)
disambiguator_swigregister = _libmorfo_python.disambiguator_swigregister
disambiguator_swigregister(disambiguator)

class sense_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sense_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sense_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sense"] = _libmorfo_python.sense_info_sense_set
    __swig_getmethods__["sense"] = _libmorfo_python.sense_info_sense_get
    if _newclass:sense = _swig_property(_libmorfo_python.sense_info_sense_get, _libmorfo_python.sense_info_sense_set)
    __swig_setmethods__["pos"] = _libmorfo_python.sense_info_pos_set
    __swig_getmethods__["pos"] = _libmorfo_python.sense_info_pos_get
    if _newclass:pos = _swig_property(_libmorfo_python.sense_info_pos_get, _libmorfo_python.sense_info_pos_set)
    __swig_setmethods__["parents"] = _libmorfo_python.sense_info_parents_set
    __swig_getmethods__["parents"] = _libmorfo_python.sense_info_parents_get
    if _newclass:parents = _swig_property(_libmorfo_python.sense_info_parents_get, _libmorfo_python.sense_info_parents_set)
    __swig_setmethods__["semfile"] = _libmorfo_python.sense_info_semfile_set
    __swig_getmethods__["semfile"] = _libmorfo_python.sense_info_semfile_get
    if _newclass:semfile = _swig_property(_libmorfo_python.sense_info_semfile_get, _libmorfo_python.sense_info_semfile_set)
    __swig_setmethods__["words"] = _libmorfo_python.sense_info_words_set
    __swig_getmethods__["words"] = _libmorfo_python.sense_info_words_get
    if _newclass:words = _swig_property(_libmorfo_python.sense_info_words_get, _libmorfo_python.sense_info_words_set)
    __swig_setmethods__["tonto"] = _libmorfo_python.sense_info_tonto_set
    __swig_getmethods__["tonto"] = _libmorfo_python.sense_info_tonto_get
    if _newclass:tonto = _swig_property(_libmorfo_python.sense_info_tonto_get, _libmorfo_python.sense_info_tonto_set)
    def __init__(self, *args): 
        this = _libmorfo_python.new_sense_info(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_parents_string(self): return _libmorfo_python.sense_info_get_parents_string(self)
    __swig_destroy__ = _libmorfo_python.delete_sense_info
    __del__ = lambda self : None;
sense_info_swigregister = _libmorfo_python.sense_info_swigregister
sense_info_swigregister(sense_info)

class semanticDB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, semanticDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, semanticDB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libmorfo_python.new_semanticDB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libmorfo_python.delete_semanticDB
    __del__ = lambda self : None;
    def get_sense_words(self, *args): return _libmorfo_python.semanticDB_get_sense_words(self, *args)
    def get_word_senses(self, *args): return _libmorfo_python.semanticDB_get_word_senses(self, *args)
    def get_sense_info(self, *args): return _libmorfo_python.semanticDB_get_sense_info(self, *args)
semanticDB_swigregister = _libmorfo_python.semanticDB_swigregister
semanticDB_swigregister(semanticDB)



